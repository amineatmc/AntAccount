// <auto-generated />
using System;
using AntalyaTaksiAccount.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AntalyaTaksiAccount.Migrations
{
    [DbContext(typeof(ATAccountContext))]
    [Migration("20230127063325_ATAccountDB-v2")]
    partial class ATAccountDBv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AntalyaTaksiAccount.Models.AllUser", b =>
                {
                    b.Property<int>("AllUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllUserID"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<string>("MailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MailVerify")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("AllUserID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("AllUserID"));

                    b.ToTable("AllUsers");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int?>("AllUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverLicenseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Penalty")
                        .HasColumnType("bit");

                    b.Property<bool>("Pet")
                        .HasColumnType("bit");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("StationID")
                        .HasColumnType("int");

                    b.HasKey("DriverID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DriverID"));

                    b.HasIndex("AllUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("StationID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.DriverVehicle", b =>
                {
                    b.Property<int>("DriverVehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverVehicleID"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int>("DeriverID")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("DriverVehicleID");

                    b.HasIndex("DriverID");

                    b.HasIndex("VehicleID");

                    b.ToTable("DriverVehicles");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerID"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int?>("AllUserID")
                        .HasColumnType("int");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("IdNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pet")
                        .HasColumnType("bit");

                    b.Property<bool>("Travel")
                        .HasColumnType("bit");

                    b.HasKey("PassengerID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PassengerID"));

                    b.HasIndex("AllUserID");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<int>("Activity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RoleID"));

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Station", b =>
                {
                    b.Property<int>("StationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationID"));

                    b.Property<int>("Activity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("AllUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StationAuto")
                        .HasColumnType("bit");

                    b.Property<int>("StationNumber")
                        .HasColumnType("int");

                    b.Property<bool>("StationStatu")
                        .HasColumnType("bit");

                    b.HasKey("StationID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("StationID"));

                    b.HasIndex("AllUserID");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleID"));

                    b.Property<int>("Activity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("VehicleID"));

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.VehicleOwner", b =>
                {
                    b.Property<int>("VehicleOwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleOwnerID"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("VehicleOwnerID");

                    b.HasIndex("VehicleID");

                    b.ToTable("VehicleOwners");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Driver", b =>
                {
                    b.HasOne("AntalyaTaksiAccount.Models.AllUser", "AllUser")
                        .WithMany()
                        .HasForeignKey("AllUserID");

                    b.HasOne("AntalyaTaksiAccount.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("AntalyaTaksiAccount.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllUser");

                    b.Navigation("Role");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.DriverVehicle", b =>
                {
                    b.HasOne("AntalyaTaksiAccount.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntalyaTaksiAccount.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Passenger", b =>
                {
                    b.HasOne("AntalyaTaksiAccount.Models.AllUser", "AllUser")
                        .WithMany()
                        .HasForeignKey("AllUserID");

                    b.Navigation("AllUser");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.Station", b =>
                {
                    b.HasOne("AntalyaTaksiAccount.Models.AllUser", "AllUser")
                        .WithMany()
                        .HasForeignKey("AllUserID");

                    b.Navigation("AllUser");
                });

            modelBuilder.Entity("AntalyaTaksiAccount.Models.VehicleOwner", b =>
                {
                    b.HasOne("AntalyaTaksiAccount.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
